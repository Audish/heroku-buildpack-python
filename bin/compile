#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -eo pipefail

# Prepend proper path for virtualenv hackery. Will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

NAME=$($BIN_DIR/detect $BUILD_DIR)
PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}
VIRTUALENV_DIRS="bin include lib"
VENDORED_MEMCACHED="http://cl.ly/0a191R3K160t1w1P0N25/vendor-libmemcached.tar.gz"
VENDORED_NODE="https://s3.amazonaws.com/audish-binaries/node-0.4.7.tgz"

unset GIT_DIR
export PIP_DOWNLOAD_CACHE

indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

function virtualenv (){
  python "$ROOT_DIR/src/virtualenv-1.7/virtualenv.py" "$@"
}

cd $BUILD_DIR

# Reject a non-packaged Django app.
if [ "$NAME" = "Python" ]; then
  [ -f manage.py ] && [ -f settings.py ] && { echo " !     Django app must be in a package subdirectory"; exit 1; }
fi

# warn a checked-in virtualenv
if [ -e "bin/activate" ] || [ -d "lib/python2.?" ]; then
  echo " !     You have a virtualenv checked in. You should ignore the appropriate paths in your repo. See http://devcenter.heroku.com/articles/gitignore for more info.";
fi

# Reject a conflicting checked-in virtualenv.
if [ -f "lib/python2.7" ]; then
  echo " !     Checked-in virtualenv conflict."
  exit 1;
fi

python -c 'import uuid ; print uuid.uuid4().hex' > SLUG_UUID

# Copy artifacts out of cache if exists.
mkdir -p $CACHE_DIR
for dir in $VIRTUALENV_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

# Create virtualenv. Rebuild if corrupt.
set +e
echo "-----> Preparing virtualenv version $(virtualenv --version)"

if [ -f .neednode ]; then
    echo "-----> Vendoring node from $VENDORED_NODE"
    curl -L -s $VENDORED_NODE | tar -zx -C bin
fi

# Try to create the virtualenv.
OUT=$(virtualenv --distribute --never-download  --prompt=venv . 2>&1)

# If there's an error, purge and recreate.
[ $? -ne 0 ] && {
  echo " !     Virtualenv corrupt, rebuilding."
  for dir in $VIRTUALENV_DIRS; do
    rm -fr $dir &> /dev/null || true
  done
  OUT=$(virtualenv --distribute --never-download  --prompt=venv . )
}
echo "$OUT" | indent

set -e

# Create set-aside .heroku folder.
mkdir -p .heroku

# Pylibmc support.
source $BIN_DIR/steps/pylibmc

# Activate the virtualenv.
echo "-----> Activating virtualenv"
source bin/activate

# Install mercurial, if needed.
if (grep -Fiq "hg+" requirements.txt) then
  pip install --use-mirrors mercurial | indent
fi

# Install dependencies.
echo "-----> Installing dependencies using pip version $(pip --version | awk '{print $2}')"
pip install --use-mirrors -r requirements.txt --src ./.heroku/src | indent

# Django support.
if [ "$NAME" = "Python/Django" ] && ! grep HEROKU_NO_DJANGO_SETTINGS **/settings.py > /dev/null; then
  source $BIN_DIR/steps/django
fi

# ugly way to make sure builtin dependencies are always reinstalled even if their version is the same
echo "-----> Builtin dependencies:"
find deps setup.py -type f -name 'setup.py' -exec sh -c 'dirname $(pwd)'/{} \; | indent
echo "-----> Installing builtin dependencies using pip version $(bin/pip --version | awk '{print $2}')"
PIP_DOWNLOAD_CACHE=$PIP_DOWNLOAD_CACHE bin/pip install --use-mirrors --ignore-installed $(find deps setup.py -type f -name 'setup.py' -exec sh -c 'dirname $(pwd)'/{} \;) | indent

# Make virtualenv relocatable.
set +e
OUT=$(virtualenv --relocatable .)
[ $? -ne 0 ] && {
  echo " !     Error making virtualenv relocatable"
  echo "$OUT" | indent
  exit 1
}
set -e

# Store new artifacts in cache.
for dir in $VIRTUALENV_DIRS; do
  rm -rf $CACHE_DIR/$dir
  cp -R $dir $CACHE_DIR/
done

if [ -x .slugfinalize ]; then
    echo "-----> Running .slugfinalize"
    ./.slugfinalize | indent
fi
