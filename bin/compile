#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -eo pipefail

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

NAME=$($BIN_DIR/detect $BUILD_DIR)
PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}
VIRTUALENV_DIR="env"

virtualenv() {
  VENV_PATH=$ROOT_DIR/src/virtualenv-1.6.4
  PYTHONPATH=$VENV_PATH python $VENV_PATH/scripts/virtualenv "$@"
}

indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

cd $BUILD_DIR

# reject a non-packaged Django app
if [ "$NAME" = "Python" ]; then
  [ -f manage.py ] && [ -f settings.py ] && { echo " !     Django app must be in a package subdirectory"; exit 1; }
fi

# copy artifacts out of cache if exists
mkdir -p $CACHE_DIR
cp -R $CACHE_DIR/$VIRTUALENV_DIR . &> /dev/null || true

echo "-----> Preparing virtualenv version $(virtualenv --version)"
virtualenv --no-site-packages $VIRTUALENV_DIR | indent

# if Django, append settings
if [ "$NAME" = "Python/Django" ]; then
  echo "-----> Django settings injection"

  SETTINGS_FILE=$(ls **/settings.py | head -1)
  PROJECT=$(dirname $SETTINGS_FILE)
  echo "       Injecting code into $SETTINGS_FILE to read from DATABASE_URL"
  
  cat >>$SETTINGS_FILE <<EOF

import os, sys, urlparse
urlparse.uses_netloc.append('postgres')
urlparse.uses_netloc.append('mysql')
try:
    if os.environ.has_key('DATABASE_URL'):
        url = urlparse.urlparse(os.environ['DATABASE_URL'])
        DATABASES['default'] = {
            'NAME':     url.path[1:],
            'USER':     url.username,
            'PASSWORD': url.password,
            'HOST':     url.hostname,
            'PORT':     url.port,
        }
        if url.scheme == 'postgres':
            DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql_psycopg2'
        if url.scheme == 'mysql':
            DATABASES['default']['ENGINE'] = 'django.db.backends.mysql'
except:
    print "Unexpected error:", sys.exc_info()

EOF
fi

echo "-----> Installing dependencies using pip version $(env/bin/pip --version | awk '{print $2}')"
PIP_DOWNLOAD_CACHE=$PIP_DOWNLOAD_CACHE env/bin/pip install --use-mirrors -r requirements.txt | indent

set +e
OUT=$(virtualenv --relocatable $VIRTUALENV_DIR)
[ $? -ne 0 ] && {
  echo " !     Error making virtualenv relocatable"
  echo "$OUT" | indent
  exit 1
}
set -e

# store new artifacts in cache
rm -rf $CACHE_DIR/$VIRTUALENV_DIR
cp -R $VIRTUALENV_DIR $CACHE_DIR/
